#!/usr/bin/python

# this program reconstruct sentences from graph generated by stanford parser
import numpy as np
import sys, getopt

argv = sys.argv[1:]
try:
	opts, args = getopt.getopt(argv,"hi:p:",["ifile=","prefix="])
except getopt.GetoptError:
	print('usage: sentFromGraph.py -i <inputfile> -p <profix>')
	sys.exit(2)

for opt, arg in opts:
	if opt == '-h':
		print('usage: sentFromGraph.py -i <inputfile> -p <prefix>')
		sys.exit()
	elif opt in ("-i", "--ifile"):
		inputfile = arg
	elif opt in ("-p", "--prefix"):
		prefix = arg
IN = open(inputfile, 'r')

OUT = open(prefix+"_sentFromGraph.txt", 'w')

Count = 0
words = []
for i in range(1000):
	words.append("")

for line in IN:
	arr = line.strip().split('\t')
	if arr[0] == "#":
		if not Count == 0:
			OUT.write(ID+'\t')
			for i in range(sentLen):
				OUT.write(words[i]+' ')
			OUT.write('\n')
		ID = arr[1]
		Count = Count + 1
		sentLen = 1
	else:
		words[int(arr[2])-1] = arr[1]
		words[int(arr[4])-1] = arr[3]
		if int(arr[2]) > sentLen:
			sentLen = int(arr[2])
		if int(arr[4]) > sentLen:
			sentLen = int(arr[4])

OUT.write(ID + '\t')
for i in range(sentLen):
	OUT.write(words[i] + ' ')
OUT.write('\n')
OUT.close()
